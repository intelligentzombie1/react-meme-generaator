{"version":3,"sources":["logo.svg","Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","alt","MemeGenerator","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImg","url","randomImage","topText","bottomText","fetch","then","response","json","memes","data","className","onSubmit","this","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,4GCa5BC,MAXf,WACI,OACI,gCACI,yBACIC,IAAI,iEACJC,IAAI,c,0CCyDLC,E,YA7DX,aAAc,IAAD,8BACT,+CASJC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBC,EADe,EACfA,KAAMC,EADS,EACTA,MACb,EAAKC,SAAL,eAAiBF,EAAOC,KAZf,EAcbE,aAAe,SAACL,GACZA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAc,EAAKH,MAAMC,YAAYL,GAASQ,IACpD,EAAKX,SAAS,CAAEY,YAAaF,KAhB7B,EAAKH,MAAQ,CACTM,QAAS,GACTC,WAAY,GACZF,YAAa,gCACbJ,YAAa,IANR,E,iFAqBW,IAAD,OACfO,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKnB,SAAS,CAACQ,YAAcW,S,+BAIzC,OACI,6BACI,0BAAME,UAAY,YAAYC,SAAUC,KAAKtB,cACzC,2BACAuB,KAAK,OACL1B,KAAM,UACN2B,YAAY,UACZJ,UAAU,QACVtB,MAAOwB,KAAKhB,MAAMM,QAClBa,SAAUH,KAAK5B,eAEf,2BACA6B,KAAK,OACL1B,KAAM,aACN2B,YAAY,aACZJ,UAAU,SACVtB,MAAOwB,KAAKhB,MAAMO,WAClBY,SAAUH,KAAK5B,eAEf,wCAEJ,yBAAK0B,UAAU,QACX,yBAAK7B,IAAO+B,KAAKhB,MAAMK,YAAanB,IAAI,KACxC,wBAAI4B,UAAY,OAAOE,KAAKhB,MAAMM,SAClC,wBAAIQ,UAAY,UAAUE,KAAKhB,MAAMO,kB,GAvD7Ba,aCebC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.befbe71f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nfunction Header(){\n    return(\n        <header>\n            <img \n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n                alt=\"problem\"\n            />\n        </header>\n    )\n}\n\nexport default Header","import React, {Component} from 'react'\n\nclass MemeGenerator extends Component{\n    constructor(){\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImage: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: []\n        }\n    }\n\n    handleChange = (event) => {\n        const {name, value} = event.target\n        this.setState({ [name]: value })\n        }\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        const randMemeImg = this.state.allMemeImgs[randNum].url\n        this.setState({ randomImage: randMemeImg })\n    }    \n\n        componentDidMount(){\n            fetch(\"https://api.imgflip.com/get_memes\")\n                .then(response => response.json())\n                .then(response => {\n                    const {memes} = response.data\n                    this.setState({allMemeImgs : memes})\n                })\n    }\n    render(){\n        return(\n            <div>\n                <form className = \"meme-form\" onSubmit={this.handleSubmit}>\n                    <input \n                    type=\"text\" \n                    name= \"topText\"\n                    placeholder=\"Toptext\"\n                    className=\"space\"\n                    value={this.state.topText}\n                    onChange={this.handleChange}\n                    />\n                    <input \n                    type=\"text\" \n                    name= \"bottomText\"\n                    placeholder=\"Bottomtext\"\n                    className=\"space1\"\n                    value={this.state.bottomText}\n                    onChange={this.handleChange}\n                    />\n                    <button>Gen</button>\n                </form>\n                <div className=\"meme\">\n                    <img src = {this.state.randomImage} alt=\"\"/>\n                    <h2 className = \"top\">{this.state.topText}</h2>\n                    <h2 className = \"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\n\n\nfunction App(){\n  return(\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}